buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
ext {
    applicationInfo = [
            'author'   : 'WangXiZhong',
            'language' : 'java',
            'crateDate': '2017/05/13',
            'remark'   : ''
    ]
}

def allProjectModules() {
    subprojects.findAll {
        it.name.contains('service-') || it.name.contains('web-') || it.name.contains('interface-')
    }
}

def serviceProjectModules() {
    subprojects.findAll {
        it.name.contains('interface-') || it.name.contains('service-')
    }
}

def webProjectModules() {
    subprojects.findAll {
        it.name.contains('web-')
    }
}


configure(allProjectModules()) {
    group = 'zootopia'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'application'
    apply plugin: 'org.springframework.boot'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    version = '1.0.0-DEVELOPMENT'

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    ext.externalLibs = new File(rootProject.rootDir, 'library').getAbsolutePath()
    ext.externalLibsJarTree = fileTree(dir: externalLibs, include: '**/*.jar')

    dependencies {
        compile externalLibsJarTree
        compile('io.jsonwebtoken:jjwt:0.6.0')
        compile('org.springframework.boot:spring-boot-starter')
        compile('org.springframework.boot:spring-boot-starter-test')
        /*compile(group: 'org.apache.zookeeper', name: 'zookeeper', version: '3.4.9')
                {
                    exclude group: 'log4j'
                    exclude group: 'org.slf4j'
                }*/
        //compile group: 'org.apache.curator', name: 'curator-recipes', version: '2.8.0'
        testCompile('junit:junit:4.12')
    }
    repositories {
        mavenCentral()
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR6"
        }
    }
}

configure(serviceProjectModules()) {
    dependencies {
        compile('org.springframework.boot:spring-boot-starter-data-redis')
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('org.springframework.boot:spring-boot-starter-jdbc')
        compile('org.apache.httpcomponents:httpclient:4.5.2')
        //compile ('net.sourceforge.jexcelapi:jxl:2.6.12')
        //compile ('org.apache.poi:poi:3.12')  excel
        compile('com.google.code.gson:gson:2.2.4')
        compile('org.projectlombok:lombok:1.16.6')
        runtime('mysql:mysql-connector-java')
    }
}

configure(webProjectModules()){
    dependencies{
        compile('org.springframework.boot:spring-boot-starter-freemarker')
        compile('org.springframework.boot:spring-boot-starter-thymeleaf')
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-starter-aop')
        compile("io.springfox:springfox-swagger2:2.2.2")
    }
}

